package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha1"
	"fmt"
	"math/big"
	"os"
)

func fromBase10(base10 string) *big.Int {
	i, ok := new(big.Int).SetString(base10, 10)
	if !ok {
		panic("bad number: " + base10)
	}
	return i
}


func exchangeDataKey() {
	//var test2048Key = &rsa.PrivateKey{
	//	PublicKey: rsa.PublicKey{
	//		N: fromBase10("14314132931241006650998084889274020608918049032671858325988396851334124245188214251956198731333464217832226406088020736932173064754214329009979944037640912127943488972644697423190955557435910767690712778463524983667852819010259499695177313115447116110358524558307947613422897787329221478860907963827160223559690523660574329011927531289655711860504630573766609239332569210831325633840174683944553667352219670930408593321661375473885147973879086994006440025257225431977751512374815915392249179976902953721486040787792801849818254465486633791826766873076617116727073077821584676715609985777563958286637185868165868520557"),
	//		E: 3,
	//	},
	//	D: fromBase10("9542755287494004433998723259516013739278699355114572217325597900889416163458809501304132487555642811888150937392013824621448709836142886006653296025093941418628992648429798282127303704957273845127141852309016655778568546006839666463451542076964744073572349705538631742281931858219480985907271975884773482372966847639853897890615456605598071088189838676728836833012254065983259638538107719766738032720239892094196108713378822882383694456030043492571063441943847195939549773271694647657549658603365629458610273821292232646334717612674519997533901052790334279661754176490593041941863932308687197618671528035670452762731"),
	//	Primes: []*big.Int{
	//		fromBase10("130903255182996722426771613606077755295583329135067340152947172868415809027537376306193179624298874215608270802054347609836776473930072411958753044562214537013874103802006369634761074377213995983876788718033850153719421695468704276694983032644416930879093914927146648402139231293035971427838068945045019075433"),
	//		fromBase10("109348945610485453577574767652527472924289229538286649661240938988020367005475727988253438647560958573506159449538793540472829815903949343191091817779240101054552748665267574271163617694640513549693841337820602726596756351006149518830932261246698766355347898158548465400674856021497190430791824869615170301029"),
	//	},
	//}
	//test2048Key.Precompute()
	/*
	D: %s a3cb5fde7b66d79ac4265f9385475f785b37864e8a7dd8e7a0a4d1cb588dfa8996e7d5812b58e1ba521e7e572953883e2d8374c7f706be72136a2c87a6aa970113b2c16d44919b06d6ff41d911a3b053567aa120774626a788fece38fdeabbaa34208aa583e301565956c83b2f9097b89590b6fe29829943d8eba23498f424b08156a46b72d9adef14baa196e83b3c9b5020af3d36fe8113f219a0459fb1119c6fe48bd432643a6b0e06227c722bd0e947f060991c59018d8e771bf50f22714d523c42a6aaf2eb2d1ed35c2051162ff2f340c9c72dd11b11eedc9a6c7e3c82e82cc3302c368da6ad48bc66cf50b522e8888cd766b70a65940a9e50b3b8ca1399
	N: %s a7d134aef43b25bf19bcfcbff61e4a84bcbd62ff31dc2ba93d7768c0977a4f313d6c1d75ac861b880c33a530bc8f171d787e9abc6326c9579d2e3554e5dbec6b9684f06a72d3120d26ad4ba22c0ef5b5ec826f8b2be9ee96e9284010b28ab0211ad135d22138403313ed5722586e1a87e2a546271c5cb349fdf6ffedcb82d60ae9f874a6e1dbfbc5e58cec957ecc5706fdcb03390c496fc436b1359a0df4bab5d0ffa049f040177b17950269e86546274f679e921eda82e6deb761fb624cced8830bfd21c9c14ff77fe6ef0bb11d0653e97be01c48fe79a6433525512f8bbf6a116291c873bea99e4405f72c109d6d42020124e18872d4921c9984ae30c9a3f9
	E: %d 65537
	*/
	N, _ := new(big.Int).SetString("ae45ed5601cec6b8cc05f803935c674ddbe0d75c4c09fd7951fc6b0caec313a8df39970c518bffba5ed68f3f0d7f22a4029d413f1ae07e4ebe9e4177ce23e7f5404b569e4ee1bdcf3c1fb03ef113802d4f855eb9b5134b5a7c8085adcae6fa2fa1417ec3763be171b0c62b760ede23c12ad92b980884c641f5a8fac26bdad4a03381a22fe1b754885094c82506d4019a535a286afeb271bb9ba592de18dcf600c2aeeae56e02f7cf79fc14cf3bdc7cd84febbbf950ca90304b2219a7aa063aefa2c3c1980e560cd64afe779585b6107657b957857efde6010988ab7de417fc88d8f384c4e6e72c3f943e0c31c0c4a5cc36f879d8a3ac9d7d59860eaada6b83bb", 16)
	publicKey := rsa.PublicKey{N, 0x10001}


	aeskey := []byte {
		0xee, 0xbc, 0x1f, 0x57, 0x48, 0x7f, 0x51, 0x92, 0x1c, 0x04, 0x65, 0x66,
		0x5f, 0x8a, 0xe6, 0xd1, 0x65, 0x8b, 0xb2, 0x6d, 0xe6, 0xf8, 0xa0, 0x69,
		0xa3, 0x52, 0x02, 0x93, 0xa5, 0x72, 0x07, 0x8f,
	}
	logger.Infof("Exchanging the AES datakey(%x)...", aeskey)
	// label := []byte("12345678901234567890") // todo hw requires the label must be 20 bytes
	label := []byte{} // from Yaming the label byte array has to be empty.

	rng := rand.Reader

	ciphertext, err := rsa.EncryptOAEP(sha1.New(), rng, &publicKey, aeskey, label)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error from encryption: %s\n", err)
		return
	}
	//logger.Infof("Ciphertext of AES datakey: %x\n", ciphertext)

	err = ExchangeDataKey(ciphertext, sha1.New().Sum(label)) // from yaming the proto.label must be sha1
	if err != nil {
		logger.Error("exchange datakey failed. err: %s", err.Error())
	} else {
		logger.Infof("exchanging datakey succeed!")
	}
}