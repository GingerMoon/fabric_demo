// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tee/tee.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TeeArgs struct {
	Args                 [][]byte `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeeArgs) Reset()         { *m = TeeArgs{} }
func (m *TeeArgs) String() string { return proto.CompactTextString(m) }
func (*TeeArgs) ProtoMessage()    {}
func (*TeeArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_148e4d29062bab63, []int{0}
}

func (m *TeeArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeeArgs.Unmarshal(m, b)
}
func (m *TeeArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeeArgs.Marshal(b, m, deterministic)
}
func (m *TeeArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeeArgs.Merge(m, src)
}
func (m *TeeArgs) XXX_Size() int {
	return xxx_messageInfo_TeeArgs.Size(m)
}
func (m *TeeArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_TeeArgs.DiscardUnknown(m)
}

var xxx_messageInfo_TeeArgs proto.InternalMessageInfo

func (m *TeeArgs) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type TeeResp struct {
	Results              [][]byte `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeeResp) Reset()         { *m = TeeResp{} }
func (m *TeeResp) String() string { return proto.CompactTextString(m) }
func (*TeeResp) ProtoMessage()    {}
func (*TeeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_148e4d29062bab63, []int{1}
}

func (m *TeeResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeeResp.Unmarshal(m, b)
}
func (m *TeeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeeResp.Marshal(b, m, deterministic)
}
func (m *TeeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeeResp.Merge(m, src)
}
func (m *TeeResp) XXX_Size() int {
	return xxx_messageInfo_TeeResp.Size(m)
}
func (m *TeeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeeResp.DiscardUnknown(m)
}

var xxx_messageInfo_TeeResp proto.InternalMessageInfo

func (m *TeeResp) GetResults() [][]byte {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*TeeArgs)(nil), "protos.TeeArgs")
	proto.RegisterType((*TeeResp)(nil), "protos.TeeResp")
}

func init() { proto.RegisterFile("tee/tee.proto", fileDescriptor_148e4d29062bab63) }

var fileDescriptor_148e4d29062bab63 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x49, 0x4d, 0xd5,
	0x2f, 0x49, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xb2,
	0x5c, 0xec, 0x21, 0xa9, 0xa9, 0x8e, 0x45, 0xe9, 0xc5, 0x42, 0x42, 0x5c, 0x2c, 0x89, 0x45, 0xe9,
	0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x92, 0x32, 0x58, 0x3a, 0x28, 0xb5,
	0xb8, 0x40, 0x48, 0x82, 0x8b, 0xbd, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x04, 0xa6, 0x02, 0xc6, 0x35,
	0x32, 0xe1, 0x62, 0x0e, 0x49, 0x4d, 0x15, 0xd2, 0xe5, 0x62, 0x77, 0xad, 0x48, 0x4d, 0x2e, 0x2d,
	0x49, 0x15, 0xe2, 0x87, 0xd8, 0x52, 0xac, 0x07, 0x35, 0x5b, 0x0a, 0x59, 0x00, 0x64, 0x9a, 0x12,
	0x43, 0x12, 0xc4, 0x05, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xa6, 0x64, 0x48, 0x99,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeeClient is the client API for Tee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeeClient interface {
	Execute(ctx context.Context, in *TeeArgs, opts ...grpc.CallOption) (*TeeResp, error)
}

type teeClient struct {
	cc *grpc.ClientConn
}

func NewTeeClient(cc *grpc.ClientConn) TeeClient {
	return &teeClient{cc}
}

func (c *teeClient) Execute(ctx context.Context, in *TeeArgs, opts ...grpc.CallOption) (*TeeResp, error) {
	out := new(TeeResp)
	err := c.cc.Invoke(ctx, "/protos.Tee/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeeServer is the server API for Tee service.
type TeeServer interface {
	Execute(context.Context, *TeeArgs) (*TeeResp, error)
}

func RegisterTeeServer(s *grpc.Server, srv TeeServer) {
	s.RegisterService(&_Tee_serviceDesc, srv)
}

func _Tee_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeeServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Tee/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeeServer).Execute(ctx, req.(*TeeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tee_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Tee",
	HandlerType: (*TeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Tee_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tee/tee.proto",
}
